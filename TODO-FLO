== Goal : passage sous maven ==

* commencer par faire migrer le code sous /src/java

* mais va nécessiter de pouvoir appliquer les patch cocoon qui se trouvent dans src/confpatch

* Création d'un plug maven spécifique

* test d'implementation d'un plug maven a partir du xPatch ant
** lenya/externals/cocoon_2_1_x/tools/src/anttasks/XConfToolTask.java

* Status de l'implementation ==> nom du module créé :: maven-xpatch
** plugin maven ok
** permet de faire la liste des dépendencies 
*** voir pour configurer les restrictions aux seuls lib lenya
** permet de lister le contenu des jar

* A FAIRE : 
** ajouter le patching via le code ant xpatch
** voir pour un moyen de configuration des "Xweb and Xconf"
*** idée de structure de dossier : META-INF/xml-patch/{fileCode}/fileName.{fileCode} ???
** mettre en place un "false project" :
*** un module qui compile des xpatch (ie prendre le contenu de src/confpatch et le mettre dans un module maven)
*** un module qui contient le web-inf par défault et sur lequel on fait les patchs.

* TODO : appliquer les patchs
** faire un projet de test contenant des fichiers de patchs
** ajouter un webinf/cocoon. dans le projet de webapp
** appliquer le patch trouver dans le projet de test à la webapp

= Copy de la webapp cocoon =


* actually files are directly copied from the cocoon/src/webapp to the lenya webapp.
** This was done by the target :   <target name="prepare-cocoon" depends="check-cocoon" unless="gump.skipcocoonbuild"> in init-build.xml
* also this patches were applied, see to do the same with xpatch maven module :
 <!-- patch logkit.xconf -->
    <xpatch file="${build.webapp}/WEB-INF/logkit.xconf"
        includes="src/confpatch/logkit-*.xconf"/> 
    
    <!-- patch log4j.xconf -->
    <xpatch file="${build.webapp}/WEB-INF/log4j.xconf"
        includes="src/confpatch/log4j-*.xconf"/> 
    
    <!-- patch web.xml -->
    <echo>PATCH web.xml</echo>
    <xpatch file="${build.webapp}/WEB-INF/web.xml" 
            includes="src/confpatch/*.xweb"/> 


= a classer =

== Patch des sitemap et cocoon.xconf ==

* dans le fichier : src/targets/webapp-build.xml
* regroupe l'ensemble des fichiers de patch dans le dossier de build puis fait tourner xpatch
** <!-- Patch sitemap.xmap -->
    <xpatch file="${build.webapp}/sitemap.xmap"
      srcdir="${build.patch}/sitemap" 
      includes="**/*.xmap"
      addComments="false"/>
    
    <!-- Patch cocoon.xconf -->
    <property name="patch.webapp" value="true"/>
    <xpatch file="${build.webapp}/WEB-INF/cocoon.xconf"
      srcdir="${build.patch}/cocoon-xconf" 
      includes="prepare/*.xconf"
      addComments="true"/>
    <xpatch file="${build.webapp}/WEB-INF/cocoon.xconf"
      srcdir="${build.patch}/cocoon-xconf" 
      includes="**/*.xconf"
      excludes="prepare/*.xconf"
      addComments="false"/>

==> voir pour faire un truc dans la phase de "process-resources"
cf : http://stackoverflow.com/a/2247645

==> voir aussi le "patch plugin" : https://maven.apache.org/plugins/maven-patch-plugin/


* pour le dev d'un plug maven : http://maven.apache.org/guides/plugin/guide-java-plugin-development.html

* une méthode consistant à exploser les jar des dépendences et à faire un filtre : 
** http://stackoverflow.com/a/6448530

=======================================================>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
==> idée finale : 
* les patchs dans un dossier resources/patches/(xconf|xweb|...) qui sont compilés avec le module par défault
* lors de la construction de la webapp : 
** dans la phase "generate-resources" 
** 1) faire le explode (à la mode http://stackoverflow.com/a/6448530)
** 2) appliquer le module perso maven qui se base sur le xpatch

= fin a classer =


== History ==

* après de nombreux test l'appel de ant par amven estt abandonné car ne fonctionne pas


* maven-archetype for creating a plugin/mojo (see the diff between)
** 211: remote -> org.apache.maven.archetypes:maven-archetype-mojo (An archetype which contains a sample a sample Maven plugin.)
**212: remote -> org.apache.maven.archetypes:maven-archetype-plugin (An archetype which contains a sample Maven plugin.)

==> actuellement teste le 212

* 1) comment récupérer les infos de patch ?
* A) unpack
* voir pour utiliser le unpack 
** http://svn.apache.org/viewvc/maven/plugins/tags/maven-dependency-plugin-2.5/src/main/java/org/apache/maven/plugin/dependency/UnpackDependenciesMojo.java?view=markup
* B) get information directly from jar

== documentation: ==

* guide java : http://maven.apache.org/guides/plugin/guide-java-plugin-development.html
** l'api : http://maven.apache.org/developers/mojo-api-specification.html
* pour les tests : http://maven.apache.org/plugin-testing/maven-plugin-testing-harness/
* les problèmes communs : http://maven.apache.org/plugin-developers/common-bugs.html

* les librairies partagés de maven : http://maven.apache.org/shared/index.html






