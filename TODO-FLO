== Goal : passage sous maven ==

* commencer par faire migrer le code sous /src/java

* mais va nécessiter de pouvoir appliquer les patch cocoon qui se trouvent dans src/confpatch

* après de nombreux test l'appel de ant par amven estt abandonné car ne fonctionne pas
* test d'implementation d'un plug maven a partir du xPatch ant
** ./properties-build.xml:    <taskdef name="xpatch"          classpath="${cocoon.src.dir}/tools/anttasks" classname="XConfToolTask" />
*** lenya/externals/cocoon_2_1_x/tools/src/anttasks/XConfToolTask.java

* maven-archetype for creating a plugin/mojo (see the diff between)
** 211: remote -> org.apache.maven.archetypes:maven-archetype-mojo (An archetype which contains a sample a sample Maven plugin.)
**212: remote -> org.apache.maven.archetypes:maven-archetype-plugin (An archetype which contains a sample Maven plugin.)

==> actuellement teste le 212

documentation:
* gide java : http://maven.apache.org/guides/plugin/guide-java-plugin-development.html
** l'api : http://maven.apache.org/developers/mojo-api-specification.html
* pour les tests : http://maven.apache.org/plugin-testing/maven-plugin-testing-harness/
* les problèmes communs : http://maven.apache.org/plugin-developers/common-bugs.html

==> nom du module créé :: maven-xpatch


=== Etape intermédiaire ===

* voir comment utiliser via ant les classes créées via maven...
* ou
* tenter de tout créer via maven directement.

== Xweb and Xconf : ==

* pour le patching sous maven : 
** http://cocoon.apache.org/2.2/maven-plugins/maven-plugin/1.0/1360_1_1.html
** https://issues.apache.org/jira/browse/COCOON-1898
*** mais ne fonctionne que pour les xweb apparement... (voir le bugtrack, peut être une solution pour tous les types)

** voir aussi pour utiliser le antTask qui existe déjà... (puis voir comment faire pour le faire passer en maven plug)
*** lenya/externals/cocoon_2_1_x/tools/src/anttasks/XConfToolTask.java


** regarder aussi ces modules (mais nécessite une modification des fichiers de patch, et apparement ne permettent pas de réaliser des patch aussi avancés)
*** http://code.google.com/p/maven-replacer-plugin/wiki/UsageGuide
*** http://mojo.codehaus.org/xml-maven-plugin/


== Patch des sitemap et cocoon.xconf ==

* dans le fichier : src/targets/webapp-build.xml
* regroupe l'ensemble des fichiers de patch dans le dossier de build puis fait tourner xpatch
** <!-- Patch sitemap.xmap -->
    <xpatch file="${build.webapp}/sitemap.xmap"
      srcdir="${build.patch}/sitemap" 
      includes="**/*.xmap"
      addComments="false"/>
    
    <!-- Patch cocoon.xconf -->
    <property name="patch.webapp" value="true"/>
    <xpatch file="${build.webapp}/WEB-INF/cocoon.xconf"
      srcdir="${build.patch}/cocoon-xconf" 
      includes="prepare/*.xconf"
      addComments="true"/>
    <xpatch file="${build.webapp}/WEB-INF/cocoon.xconf"
      srcdir="${build.patch}/cocoon-xconf" 
      includes="**/*.xconf"
      excludes="prepare/*.xconf"
      addComments="false"/>

==> voir pour faire un truc dans la phase de "process-resources"
cf : http://stackoverflow.com/a/2247645

==> voir aussi le "patch plugin" : https://maven.apache.org/plugins/maven-patch-plugin/


* pour le dev d'un plug maven : http://maven.apache.org/guides/plugin/guide-java-plugin-development.html

* une méthode consistant à exploser les jar des dépendences et à faire un filtre : 
** http://stackoverflow.com/a/6448530

=======================================================>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
==> idée finale : 
* les patchs dans un dossier resources/patches/(xconf|xweb|...) qui sont compilés avec le module par défault
* lors de la construction de la webapp : 
** dans la phase "generate-resources" 
** 1) faire le explode (à la mode http://stackoverflow.com/a/6448530)
** 2) appliquer le module perso maven qui se base sur le xpatch

